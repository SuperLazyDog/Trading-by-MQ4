//
//  Hash.h
//  Basic Review
//
//  Created by 徐伟达 on 2017/6/19.
//  Copyright © 2017年 徐伟达. All rights reserved.
//

#ifndef Hash_h
#define Hash_h

#include <stdio.h>
#include <stdlib.h>
#include "Bool.h"
#include "MemorySet.h"
//---------------------------------------------------------------------------
//                                  笔记
//---------------------------------------------------------------------------
/*---------------------------------------------------------------------------
　散式哈希表： 每一个哈希值对应的桶为链表的头节点
            重复哈希值在桶里往后走

 双重指针： 指向地址的指针
     注意： 指针是一种独特的数据类型，不能直接和int划等号。
	       指针不初始化不能用
	 例： int a, *b, **c;
　　　　　　　　a = 1;
         b = &a;
		错: *c = b;//　c是指针的指针，还没初始化不能直接用


		对: c = (int *)malloc(sizeof(int));
		    *c = b; //　注意，这时候c指向的是b的位置，也就是a的地址。对b运算或者对*c的运算实际上实在向a旁的地址移动
	        //对c的操作是在b的地址附近移动，而b是a的地址，本身就是指针。换句话说，操作c实在操作a的数组的开头附近的地址

		int a[] = [1, 2, 3];
		int *b = a + 1;
		int *c = a -1;
		int **d = &a;// d + 1 = b; d - 1 = c;
 ---------------------------------------------------------------------------*/



//---------------------------------------------------------------------------
//                                 哈希表
//---------------------------------------------------------------------------
//-------------------------------------------------------
//                       类型定义
//-------------------------------------------------------
//------------------------------
//实际使用时候改变这个定义     散式哈希表处理的数据类型
typedef Human ChainHash_Data;
//------------------------------
typedef struct __chainHash_Node { // 哈希表的节点
	ChainHash_Data data; // 存放的数据
	struct __chainHash_Node *next; // 同一哈希值的下一个节点的指针
} ChainHash_Node;

typedef struct { // 哈希表
	int size; // 容量
	ChainHash_Node **table; // 哈希表开头的指针的指针
} ChainHash;

//-------------------------------------------------------
//                     管理测试的函数
//-------------------------------------------------------
void chainHashTest();

//-------------------------------------------------------
//                        检索
//-------------------------------------------------------
ChainHash_Node *search(const ChainHash *hashTable, const Data *data);

//-------------------------------------------------------
//                        追加
//-------------------------------------------------------
bool Insert_Data_ChainHash(ChainHash *hashTable, const Data *data);

//-------------------------------------------------------
//                        删除
//-------------------------------------------------------
bool delete_Data_ChainHash(ChainHash *hashTable, const Data *data);

//-------------------------------------------------------
//                        Dump
//-------------------------------------------------------
void dump_ChainHash(const ChainHash *hashTable);

//-------------------------------------------------------
//                       全部删除
//-------------------------------------------------------
void clear(ChainHash *hashTable);

//-------------------------------------------------------
//                      收尾（全删除）
//-------------------------------------------------------
void terminate_ChainHash(ChainHash *hashTable);

#endif /* Hash_h */
